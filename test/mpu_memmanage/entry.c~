

#include "syscall.h"
#include "echo_prog.h"
#include "inc/stm32h743.h"

extern u32 __AXI_SRAM_START[];

__attribute__((noreturn))
void h743_reset_isr(){

  ARM_CPSIE;

  h743_gpio_conf_t gpio_conf;
  h743_mpu_conf_t mpu_conf;
  
  h743_rcc_enable_clock_ahb4(RCC_AHB4_GPIOI);

  h743_gpio_init_conf(gpio_conf);
  h743_mpu_init_conf(mpu_conf);

  gpio_conf.pin = 6;
  gpio_conf.mode = output;
  h743_gpio_conf(GPIOI, &gpio_conf);

  //h743_gpio_set(GPIOI, 6);

  h743_mpu_conf(&mpu_conf);

  mpu_conf.region = 1;
  mpu_conf.address = (u32) __AXI_SRAM_START;
  mpu_conf.size = region_size_4KB;
  mpu_conf.access_permission = rw_privileged;
  h743_mpu_conf(&mpu_conf);

  h743_mpu_enable_region(0);
  h743_mpu_enable_region(1);

  h743_mpu_enable(MPU_BACKGROUND_REGION | MPU_REGIONS);

  /* setup psp and go in UNPRIVILEGED thread mode */
  asm("\
ldr r0, =__AXI_SRAM_END\n				\
msr psp, r0\n						\
mrs r0, control\n					\
orr r0, r0, #3\n					\
msr control, r0\n					\
isb							\
");

  h743_gpio_set(GPIOI, 6);
  
  echo_prog();
}

void h743_memmanage_isr(){

  h743_usart_write_str(USART2, (u8 *) "MEMMANAGE FAULT\n");
  while(1);
}

__attribute__((naked))
void h743_svcall_isr(){
  
  asm("\
mrs r0, psp\n					\
b svchandler					\
");
}

void enable_usart_2();

void svchandler(u32 *sp){

  switch(((u8 *) sp[6])[-2]){
  case SVCN_OPEN :
    //Enable Usart 2 , execution get atleast to here and usart is configured
    //as it should
    enable_usart_2();
    break;
  case SVCN_RECEIVE :
    //Poll Usart 2 rxne and modify sp[0] to return the value
    h743_usart_wait_rxne(USART2);
    sp[0] = h743_usart_receive(USART2);
    break;
  case SVCN_TRANSMIT :
    //Poll Usart 2 txe and transmit sp[0]
    h743_usart_wait_txe(USART2);
    h743_usart_transmit(USART2, sp[0]);
    break;
  case SVCN_CLOSE :
    //Disable Usart 2
    h743_usart_disable(USART2);
    break;
  }
}

void enable_usart_2(){

  h743_gpio_conf_t gpio_conf;
  h743_usart_conf_t usart_conf;

  h743_rcc_enable_clock_ahb4(RCC_AHB4_GPIOD);
  h743_rcc_enable_clock_apb1l(RCC_APB1L_USART2);

  h743_gpio_init_conf(gpio_conf);
  h743_usart_init_conf(usart_conf);

  gpio_conf.pin = 5;
  gpio_conf.mode = alternate_function;
  gpio_conf.alternate_function = 7;

  h743_gpio_conf(GPIOD, &gpio_conf);  //TX

  gpio_conf.pin = 6;
  gpio_conf.mode = alternate_function;
  gpio_conf.alternate_function = 7;

  h743_gpio_conf(GPIOD, &gpio_conf);  //RX

  h743_usart_conf(USART2, &usart_conf, 64000000);
  h743_usart_enable(USART2);
}

